// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class CharacterMetaData;
struct CharacterMetaDataDefaultTypeInternal;
extern CharacterMetaDataDefaultTypeInternal _CharacterMetaData_default_instance_;
class ConsumMetaData;
struct ConsumMetaDataDefaultTypeInternal;
extern ConsumMetaDataDefaultTypeInternal _ConsumMetaData_default_instance_;
class EnemyMetaData;
struct EnemyMetaDataDefaultTypeInternal;
extern EnemyMetaDataDefaultTypeInternal _EnemyMetaData_default_instance_;
class EquipMetaData;
struct EquipMetaDataDefaultTypeInternal;
extern EquipMetaDataDefaultTypeInternal _EquipMetaData_default_instance_;
class NPCMetaData;
struct NPCMetaDataDefaultTypeInternal;
extern NPCMetaDataDefaultTypeInternal _NPCMetaData_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PBCharacterData;
struct PBCharacterDataDefaultTypeInternal;
extern PBCharacterDataDefaultTypeInternal _PBCharacterData_default_instance_;
class PBItemData;
struct PBItemDataDefaultTypeInternal;
extern PBItemDataDefaultTypeInternal _PBItemData_default_instance_;
class PBSkillData;
struct PBSkillDataDefaultTypeInternal;
extern PBSkillDataDefaultTypeInternal _PBSkillData_default_instance_;
class PBVector;
struct PBVectorDefaultTypeInternal;
extern PBVectorDefaultTypeInternal _PBVector_default_instance_;
class ProjectileInfo;
struct ProjectileInfoDefaultTypeInternal;
extern ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
class ProjectileMetaData;
struct ProjectileMetaDataDefaultTypeInternal;
extern ProjectileMetaDataDefaultTypeInternal _ProjectileMetaData_default_instance_;
class SkillMetaData;
struct SkillMetaDataDefaultTypeInternal;
extern SkillMetaDataDefaultTypeInternal _SkillMetaData_default_instance_;
class StatMetaData;
struct StatMetaDataDefaultTypeInternal;
extern StatMetaDataDefaultTypeInternal _StatMetaData_default_instance_;
class SummonsMetaData;
struct SummonsMetaDataDefaultTypeInternal;
extern SummonsMetaDataDefaultTypeInternal _SummonsMetaData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CharacterMetaData* Arena::CreateMaybeMessage<::Protocol::CharacterMetaData>(Arena*);
template<> ::Protocol::ConsumMetaData* Arena::CreateMaybeMessage<::Protocol::ConsumMetaData>(Arena*);
template<> ::Protocol::EnemyMetaData* Arena::CreateMaybeMessage<::Protocol::EnemyMetaData>(Arena*);
template<> ::Protocol::EquipMetaData* Arena::CreateMaybeMessage<::Protocol::EquipMetaData>(Arena*);
template<> ::Protocol::NPCMetaData* Arena::CreateMaybeMessage<::Protocol::NPCMetaData>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PBCharacterData* Arena::CreateMaybeMessage<::Protocol::PBCharacterData>(Arena*);
template<> ::Protocol::PBItemData* Arena::CreateMaybeMessage<::Protocol::PBItemData>(Arena*);
template<> ::Protocol::PBSkillData* Arena::CreateMaybeMessage<::Protocol::PBSkillData>(Arena*);
template<> ::Protocol::PBVector* Arena::CreateMaybeMessage<::Protocol::PBVector>(Arena*);
template<> ::Protocol::ProjectileInfo* Arena::CreateMaybeMessage<::Protocol::ProjectileInfo>(Arena*);
template<> ::Protocol::ProjectileMetaData* Arena::CreateMaybeMessage<::Protocol::ProjectileMetaData>(Arena*);
template<> ::Protocol::SkillMetaData* Arena::CreateMaybeMessage<::Protocol::SkillMetaData>(Arena*);
template<> ::Protocol::StatMetaData* Arena::CreateMaybeMessage<::Protocol::StatMetaData>(Arena*);
template<> ::Protocol::SummonsMetaData* Arena::CreateMaybeMessage<::Protocol::SummonsMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectInfo& from);
  void MergeFrom(const ObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kLocationFieldNumber = 3,
    kRotatorFieldNumber = 4,
    kForwardDirFieldNumber = 5,
    kRoomIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kScaleFieldNumber = 6,
    kMetaIdFieldNumber = 7,
  };
  // string name = 8;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.PBVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::PBVector& location() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PBVector* release_location();
  ::Protocol::PBVector* mutable_location();
  void set_allocated_location(::Protocol::PBVector* location);
  private:
  const ::Protocol::PBVector& _internal_location() const;
  ::Protocol::PBVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::PBVector* location);
  ::Protocol::PBVector* unsafe_arena_release_location();

  // .Protocol.PBVector rotator = 4;
  bool has_rotator() const;
  private:
  bool _internal_has_rotator() const;
  public:
  void clear_rotator();
  const ::Protocol::PBVector& rotator() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PBVector* release_rotator();
  ::Protocol::PBVector* mutable_rotator();
  void set_allocated_rotator(::Protocol::PBVector* rotator);
  private:
  const ::Protocol::PBVector& _internal_rotator() const;
  ::Protocol::PBVector* _internal_mutable_rotator();
  public:
  void unsafe_arena_set_allocated_rotator(
      ::Protocol::PBVector* rotator);
  ::Protocol::PBVector* unsafe_arena_release_rotator();

  // .Protocol.PBVector forwardDir = 5;
  bool has_forwarddir() const;
  private:
  bool _internal_has_forwarddir() const;
  public:
  void clear_forwarddir();
  const ::Protocol::PBVector& forwarddir() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PBVector* release_forwarddir();
  ::Protocol::PBVector* mutable_forwarddir();
  void set_allocated_forwarddir(::Protocol::PBVector* forwarddir);
  private:
  const ::Protocol::PBVector& _internal_forwarddir() const;
  ::Protocol::PBVector* _internal_mutable_forwarddir();
  public:
  void unsafe_arena_set_allocated_forwarddir(
      ::Protocol::PBVector* forwarddir);
  ::Protocol::PBVector* unsafe_arena_release_forwarddir();

  // uint64 roomId = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.ObjectType type = 2;
  void clear_type();
  ::Protocol::ObjectType type() const;
  void set_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_type() const;
  void _internal_set_type(::Protocol::ObjectType value);
  public:

  // float scale = 6;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // uint64 metaId = 7;
  void clear_metaid();
  ::PROTOBUF_NAMESPACE_ID::uint64 metaid() const;
  void set_metaid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_metaid() const;
  void _internal_set_metaid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Protocol::PBVector* location_;
  ::Protocol::PBVector* rotator_;
  ::Protocol::PBVector* forwarddir_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomid_;
  int type_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metaid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PBVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PBVector) */ {
 public:
  inline PBVector() : PBVector(nullptr) {}
  ~PBVector() override;
  explicit constexpr PBVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBVector(const PBVector& from);
  PBVector(PBVector&& from) noexcept
    : PBVector() {
    *this = ::std::move(from);
  }

  inline PBVector& operator=(const PBVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBVector& operator=(PBVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBVector* internal_default_instance() {
    return reinterpret_cast<const PBVector*>(
               &_PBVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBVector& a, PBVector& b) {
    a.Swap(&b);
  }
  inline void Swap(PBVector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBVector* New() const final {
    return new PBVector();
  }

  PBVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBVector& from);
  void MergeFrom(const PBVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PBVector";
  }
  protected:
  explicit PBVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PBVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PBCharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PBCharacterData) */ {
 public:
  inline PBCharacterData() : PBCharacterData(nullptr) {}
  ~PBCharacterData() override;
  explicit constexpr PBCharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBCharacterData(const PBCharacterData& from);
  PBCharacterData(PBCharacterData&& from) noexcept
    : PBCharacterData() {
    *this = ::std::move(from);
  }

  inline PBCharacterData& operator=(const PBCharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBCharacterData& operator=(PBCharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBCharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBCharacterData* internal_default_instance() {
    return reinterpret_cast<const PBCharacterData*>(
               &_PBCharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBCharacterData& a, PBCharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBCharacterData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBCharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBCharacterData* New() const final {
    return new PBCharacterData();
  }

  PBCharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBCharacterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBCharacterData& from);
  void MergeFrom(const PBCharacterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBCharacterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PBCharacterData";
  }
  protected:
  explicit PBCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 4,
    kCharMetaFieldNumber = 3,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kHpFieldNumber = 5,
    kMpFieldNumber = 6,
    kMaxhpFieldNumber = 7,
    kMaxmpFieldNumber = 8,
    kExpFieldNumber = 9,
    kMaxexpFieldNumber = 10,
    kGoldFieldNumber = 11,
  };
  // repeated .Protocol.PBSkillData skills = 4;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::Protocol::PBSkillData* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PBSkillData >*
      mutable_skills();
  private:
  const ::Protocol::PBSkillData& _internal_skills(int index) const;
  ::Protocol::PBSkillData* _internal_add_skills();
  public:
  const ::Protocol::PBSkillData& skills(int index) const;
  ::Protocol::PBSkillData* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PBSkillData >&
      skills() const;

  // .Protocol.CharacterMetaData charMeta = 3;
  bool has_charmeta() const;
  private:
  bool _internal_has_charmeta() const;
  public:
  void clear_charmeta();
  const ::Protocol::CharacterMetaData& charmeta() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::CharacterMetaData* release_charmeta();
  ::Protocol::CharacterMetaData* mutable_charmeta();
  void set_allocated_charmeta(::Protocol::CharacterMetaData* charmeta);
  private:
  const ::Protocol::CharacterMetaData& _internal_charmeta() const;
  ::Protocol::CharacterMetaData* _internal_mutable_charmeta();
  public:
  void unsafe_arena_set_allocated_charmeta(
      ::Protocol::CharacterMetaData* charmeta);
  ::Protocol::CharacterMetaData* unsafe_arena_release_charmeta();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint64 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float hp = 5;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float mp = 6;
  void clear_mp();
  float mp() const;
  void set_mp(float value);
  private:
  float _internal_mp() const;
  void _internal_set_mp(float value);
  public:

  // float maxhp = 7;
  void clear_maxhp();
  float maxhp() const;
  void set_maxhp(float value);
  private:
  float _internal_maxhp() const;
  void _internal_set_maxhp(float value);
  public:

  // float maxmp = 8;
  void clear_maxmp();
  float maxmp() const;
  void set_maxmp(float value);
  private:
  float _internal_maxmp() const;
  void _internal_set_maxmp(float value);
  public:

  // float exp = 9;
  void clear_exp();
  float exp() const;
  void set_exp(float value);
  private:
  float _internal_exp() const;
  void _internal_set_exp(float value);
  public:

  // float maxexp = 10;
  void clear_maxexp();
  float maxexp() const;
  void set_maxexp(float value);
  private:
  float _internal_maxexp() const;
  void _internal_set_maxexp(float value);
  public:

  // float gold = 11;
  void clear_gold();
  float gold() const;
  void set_gold(float value);
  private:
  float _internal_gold() const;
  void _internal_set_gold(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PBCharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PBSkillData > skills_;
  ::Protocol::CharacterMetaData* charmeta_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 level_;
  float hp_;
  float mp_;
  float maxhp_;
  float maxmp_;
  float exp_;
  float maxexp_;
  float gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PBItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PBItemData) */ {
 public:
  inline PBItemData() : PBItemData(nullptr) {}
  ~PBItemData() override;
  explicit constexpr PBItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBItemData(const PBItemData& from);
  PBItemData(PBItemData&& from) noexcept
    : PBItemData() {
    *this = ::std::move(from);
  }

  inline PBItemData& operator=(const PBItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBItemData& operator=(PBItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBItemData* internal_default_instance() {
    return reinterpret_cast<const PBItemData*>(
               &_PBItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBItemData& a, PBItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBItemData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBItemData* New() const final {
    return new PBItemData();
  }

  PBItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBItemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBItemData& from);
  void MergeFrom(const PBItemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PBItemData";
  }
  protected:
  explicit PBItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumDataFieldNumber = 2,
    kEquipDataFieldNumber = 4,
    kCountFieldNumber = 3,
    kUpgradeFieldNumber = 5,
    kIdxFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // .Protocol.ConsumMetaData consumData = 2;
  bool has_consumdata() const;
  private:
  bool _internal_has_consumdata() const;
  public:
  void clear_consumdata();
  const ::Protocol::ConsumMetaData& consumdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ConsumMetaData* release_consumdata();
  ::Protocol::ConsumMetaData* mutable_consumdata();
  void set_allocated_consumdata(::Protocol::ConsumMetaData* consumdata);
  private:
  const ::Protocol::ConsumMetaData& _internal_consumdata() const;
  ::Protocol::ConsumMetaData* _internal_mutable_consumdata();
  public:
  void unsafe_arena_set_allocated_consumdata(
      ::Protocol::ConsumMetaData* consumdata);
  ::Protocol::ConsumMetaData* unsafe_arena_release_consumdata();

  // .Protocol.EquipMetaData equipData = 4;
  bool has_equipdata() const;
  private:
  bool _internal_has_equipdata() const;
  public:
  void clear_equipdata();
  const ::Protocol::EquipMetaData& equipdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::EquipMetaData* release_equipdata();
  ::Protocol::EquipMetaData* mutable_equipdata();
  void set_allocated_equipdata(::Protocol::EquipMetaData* equipdata);
  private:
  const ::Protocol::EquipMetaData& _internal_equipdata() const;
  ::Protocol::EquipMetaData* _internal_mutable_equipdata();
  public:
  void unsafe_arena_set_allocated_equipdata(
      ::Protocol::EquipMetaData* equipdata);
  ::Protocol::EquipMetaData* unsafe_arena_release_equipdata();

  // uint64 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 upgrade = 5;
  void clear_upgrade();
  ::PROTOBUF_NAMESPACE_ID::uint64 upgrade() const;
  void set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_upgrade() const;
  void _internal_set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 idx = 6;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint64 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.DataType type = 1;
  void clear_type();
  ::Protocol::DataType type() const;
  void set_type(::Protocol::DataType value);
  private:
  ::Protocol::DataType _internal_type() const;
  void _internal_set_type(::Protocol::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PBItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ConsumMetaData* consumdata_;
  ::Protocol::EquipMetaData* equipdata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upgrade_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idx_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PBSkillData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PBSkillData) */ {
 public:
  inline PBSkillData() : PBSkillData(nullptr) {}
  ~PBSkillData() override;
  explicit constexpr PBSkillData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBSkillData(const PBSkillData& from);
  PBSkillData(PBSkillData&& from) noexcept
    : PBSkillData() {
    *this = ::std::move(from);
  }

  inline PBSkillData& operator=(const PBSkillData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSkillData& operator=(PBSkillData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBSkillData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBSkillData* internal_default_instance() {
    return reinterpret_cast<const PBSkillData*>(
               &_PBSkillData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBSkillData& a, PBSkillData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSkillData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSkillData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBSkillData* New() const final {
    return new PBSkillData();
  }

  PBSkillData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBSkillData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBSkillData& from);
  void MergeFrom(const PBSkillData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSkillData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PBSkillData";
  }
  protected:
  explicit PBSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillMetaFieldNumber = 3,
    kIdFieldNumber = 1,
    kUpgradeFieldNumber = 2,
  };
  // .Protocol.SkillMetaData skillMeta = 3;
  bool has_skillmeta() const;
  private:
  bool _internal_has_skillmeta() const;
  public:
  void clear_skillmeta();
  const ::Protocol::SkillMetaData& skillmeta() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::SkillMetaData* release_skillmeta();
  ::Protocol::SkillMetaData* mutable_skillmeta();
  void set_allocated_skillmeta(::Protocol::SkillMetaData* skillmeta);
  private:
  const ::Protocol::SkillMetaData& _internal_skillmeta() const;
  ::Protocol::SkillMetaData* _internal_mutable_skillmeta();
  public:
  void unsafe_arena_set_allocated_skillmeta(
      ::Protocol::SkillMetaData* skillmeta);
  ::Protocol::SkillMetaData* unsafe_arena_release_skillmeta();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 upgrade = 2;
  void clear_upgrade();
  ::PROTOBUF_NAMESPACE_ID::uint64 upgrade() const;
  void set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_upgrade() const;
  void _internal_set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PBSkillData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::SkillMetaData* skillmeta_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upgrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class CharacterMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CharacterMetaData) */ {
 public:
  inline CharacterMetaData() : CharacterMetaData(nullptr) {}
  ~CharacterMetaData() override;
  explicit constexpr CharacterMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterMetaData(const CharacterMetaData& from);
  CharacterMetaData(CharacterMetaData&& from) noexcept
    : CharacterMetaData() {
    *this = ::std::move(from);
  }

  inline CharacterMetaData& operator=(const CharacterMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterMetaData& operator=(CharacterMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterMetaData* internal_default_instance() {
    return reinterpret_cast<const CharacterMetaData*>(
               &_CharacterMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CharacterMetaData& a, CharacterMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterMetaData* New() const final {
    return new CharacterMetaData();
  }

  CharacterMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterMetaData& from);
  void MergeFrom(const CharacterMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CharacterMetaData";
  }
  protected:
  explicit CharacterMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 5,
    kResourceFieldNumber = 2,
    kAnimFieldNumber = 3,
    kStatFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // repeated uint64 skills = 5;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_skills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_skills() const;
  void _internal_add_skills(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_skills();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 skills(int index) const;
  void set_skills(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_skills(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_skills();

  // string resource = 2;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string anim = 3;
  void clear_anim();
  const std::string& anim() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anim(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anim();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_anim();
  void set_allocated_anim(std::string* anim);
  private:
  const std::string& _internal_anim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anim(const std::string& value);
  std::string* _internal_mutable_anim();
  public:

  // .Protocol.StatMetaData stat = 6;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::Protocol::StatMetaData& stat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::StatMetaData* release_stat();
  ::Protocol::StatMetaData* mutable_stat();
  void set_allocated_stat(::Protocol::StatMetaData* stat);
  private:
  const ::Protocol::StatMetaData& _internal_stat() const;
  ::Protocol::StatMetaData* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::Protocol::StatMetaData* stat);
  ::Protocol::StatMetaData* unsafe_arena_release_stat();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.PlayerType type = 4;
  void clear_type();
  ::Protocol::PlayerType type() const;
  void set_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_type() const;
  void _internal_set_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CharacterMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > skills_;
  mutable std::atomic<int> _skills_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anim_;
  ::Protocol::StatMetaData* stat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillMetaData) */ {
 public:
  inline SkillMetaData() : SkillMetaData(nullptr) {}
  ~SkillMetaData() override;
  explicit constexpr SkillMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillMetaData(const SkillMetaData& from);
  SkillMetaData(SkillMetaData&& from) noexcept
    : SkillMetaData() {
    *this = ::std::move(from);
  }

  inline SkillMetaData& operator=(const SkillMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillMetaData& operator=(SkillMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillMetaData* internal_default_instance() {
    return reinterpret_cast<const SkillMetaData*>(
               &_SkillMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SkillMetaData& a, SkillMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillMetaData* New() const final {
    return new SkillMetaData();
  }

  SkillMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillMetaData& from);
  void MergeFrom(const SkillMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillMetaData";
  }
  protected:
  explicit SkillMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kResourceFieldNumber = 6,
    kIdFieldNumber = 1,
    kDamageFieldNumber = 4,
    kMpconsumptionFieldNumber = 5,
    kCooldownFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string resource = 6;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 damage = 4;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint64 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mpconsumption = 5;
  void clear_mpconsumption();
  ::PROTOBUF_NAMESPACE_ID::uint64 mpconsumption() const;
  void set_mpconsumption(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mpconsumption() const;
  void _internal_set_mpconsumption(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float cooldown = 3;
  void clear_cooldown();
  float cooldown() const;
  void set_cooldown(float value);
  private:
  float _internal_cooldown() const;
  void _internal_set_cooldown(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mpconsumption_;
  float cooldown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileInfo) */ {
 public:
  inline ProjectileInfo() : ProjectileInfo(nullptr) {}
  ~ProjectileInfo() override;
  explicit constexpr ProjectileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileInfo(const ProjectileInfo& from);
  ProjectileInfo(ProjectileInfo&& from) noexcept
    : ProjectileInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileInfo& operator=(const ProjectileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileInfo& operator=(ProjectileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileInfo*>(
               &_ProjectileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProjectileInfo& a, ProjectileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectileInfo* New() const final {
    return new ProjectileInfo();
  }

  ProjectileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectileInfo& from);
  void MergeFrom(const ProjectileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileInfo";
  }
  protected:
  explicit ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSourceNameFieldNumber = 4,
    kSpeedFieldNumber = 2,
    kRangeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sourceName = 4;
  void clear_sourcename();
  const std::string& sourcename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourcename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourcename();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sourcename();
  void set_allocated_sourcename(std::string* sourcename);
  private:
  const std::string& _internal_sourcename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcename(const std::string& value);
  std::string* _internal_mutable_sourcename();
  public:

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float range = 3;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcename_;
  float speed_;
  float range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ConsumMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ConsumMetaData) */ {
 public:
  inline ConsumMetaData() : ConsumMetaData(nullptr) {}
  ~ConsumMetaData() override;
  explicit constexpr ConsumMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsumMetaData(const ConsumMetaData& from);
  ConsumMetaData(ConsumMetaData&& from) noexcept
    : ConsumMetaData() {
    *this = ::std::move(from);
  }

  inline ConsumMetaData& operator=(const ConsumMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumMetaData& operator=(ConsumMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumMetaData* internal_default_instance() {
    return reinterpret_cast<const ConsumMetaData*>(
               &_ConsumMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConsumMetaData& a, ConsumMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsumMetaData* New() const final {
    return new ConsumMetaData();
  }

  ConsumMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumMetaData& from);
  void MergeFrom(const ConsumMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ConsumMetaData";
  }
  protected:
  explicit ConsumMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kResourceFieldNumber = 7,
    kDescFieldNumber = 8,
    kIdFieldNumber = 1,
    kHpFieldNumber = 3,
    kMpFieldNumber = 4,
    kPercentageFieldNumber = 5,
    kPriceFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string resource = 7;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hp = 3;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mp = 4;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::uint64 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 percentage = 5;
  void clear_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage() const;
  void set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_percentage() const;
  void _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ConsumMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class EquipMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EquipMetaData) */ {
 public:
  inline EquipMetaData() : EquipMetaData(nullptr) {}
  ~EquipMetaData() override;
  explicit constexpr EquipMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipMetaData(const EquipMetaData& from);
  EquipMetaData(EquipMetaData&& from) noexcept
    : EquipMetaData() {
    *this = ::std::move(from);
  }

  inline EquipMetaData& operator=(const EquipMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipMetaData& operator=(EquipMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipMetaData* internal_default_instance() {
    return reinterpret_cast<const EquipMetaData*>(
               &_EquipMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EquipMetaData& a, EquipMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquipMetaData* New() const final {
    return new EquipMetaData();
  }

  EquipMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquipMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquipMetaData& from);
  void MergeFrom(const EquipMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EquipMetaData";
  }
  protected:
  explicit EquipMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kResourceFieldNumber = 8,
    kIdFieldNumber = 1,
    kAttackFieldNumber = 3,
    kDefenseFieldNumber = 4,
    kPercentageFieldNumber = 6,
    kPriceFieldNumber = 7,
    kEquiptypeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string resource = 8;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 attack = 3;
  void clear_attack();
  ::PROTOBUF_NAMESPACE_ID::uint64 attack() const;
  void set_attack(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attack() const;
  void _internal_set_attack(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 defense = 4;
  void clear_defense();
  ::PROTOBUF_NAMESPACE_ID::uint64 defense() const;
  void set_defense(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_defense() const;
  void _internal_set_defense(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 percentage = 6;
  void clear_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage() const;
  void set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_percentage() const;
  void _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 7;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.EquipType equiptype = 5;
  void clear_equiptype();
  ::Protocol::EquipType equiptype() const;
  void set_equiptype(::Protocol::EquipType value);
  private:
  ::Protocol::EquipType _internal_equiptype() const;
  void _internal_set_equiptype(::Protocol::EquipType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EquipMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attack_;
  ::PROTOBUF_NAMESPACE_ID::uint64 defense_;
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  int equiptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class NPCMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.NPCMetaData) */ {
 public:
  inline NPCMetaData() : NPCMetaData(nullptr) {}
  ~NPCMetaData() override;
  explicit constexpr NPCMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NPCMetaData(const NPCMetaData& from);
  NPCMetaData(NPCMetaData&& from) noexcept
    : NPCMetaData() {
    *this = ::std::move(from);
  }

  inline NPCMetaData& operator=(const NPCMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NPCMetaData& operator=(NPCMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NPCMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NPCMetaData* internal_default_instance() {
    return reinterpret_cast<const NPCMetaData*>(
               &_NPCMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NPCMetaData& a, NPCMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(NPCMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NPCMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NPCMetaData* New() const final {
    return new NPCMetaData();
  }

  NPCMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NPCMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NPCMetaData& from);
  void MergeFrom(const NPCMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NPCMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.NPCMetaData";
  }
  protected:
  explicit NPCMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated uint64 ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_ids();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.NPCMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileMetaData) */ {
 public:
  inline ProjectileMetaData() : ProjectileMetaData(nullptr) {}
  ~ProjectileMetaData() override;
  explicit constexpr ProjectileMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileMetaData(const ProjectileMetaData& from);
  ProjectileMetaData(ProjectileMetaData&& from) noexcept
    : ProjectileMetaData() {
    *this = ::std::move(from);
  }

  inline ProjectileMetaData& operator=(const ProjectileMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileMetaData& operator=(ProjectileMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileMetaData* internal_default_instance() {
    return reinterpret_cast<const ProjectileMetaData*>(
               &_ProjectileMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProjectileMetaData& a, ProjectileMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectileMetaData* New() const final {
    return new ProjectileMetaData();
  }

  ProjectileMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectileMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectileMetaData& from);
  void MergeFrom(const ProjectileMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileMetaData";
  }
  protected:
  explicit ProjectileMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 9,
    kResourceMaterialFieldNumber = 10,
    kEffectFieldNumber = 11,
    kEffectMeshFieldNumber = 14,
    kEffectMaterialFieldNumber = 15,
    kExplosionEffectFieldNumber = 18,
    kEffectLocationFieldNumber = 12,
    kEffectMeshLocationFieldNumber = 16,
    kIdFieldNumber = 1,
    kDamageFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kSizeFieldNumber = 4,
    kScaleFieldNumber = 5,
    kDurationFieldNumber = 6,
    kLimitDistanceFieldNumber = 7,
    kChildProjectileIdFieldNumber = 8,
    kEffectScaleFieldNumber = 13,
    kEffectMeshScaleFieldNumber = 17,
  };
  // string resource = 9;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string resourceMaterial = 10;
  void clear_resourcematerial();
  const std::string& resourcematerial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourcematerial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourcematerial();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resourcematerial();
  void set_allocated_resourcematerial(std::string* resourcematerial);
  private:
  const std::string& _internal_resourcematerial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourcematerial(const std::string& value);
  std::string* _internal_mutable_resourcematerial();
  public:

  // string effect = 11;
  void clear_effect();
  const std::string& effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effect();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_effect();
  void set_allocated_effect(std::string* effect);
  private:
  const std::string& _internal_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effect(const std::string& value);
  std::string* _internal_mutable_effect();
  public:

  // string effectMesh = 14;
  void clear_effectmesh();
  const std::string& effectmesh() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effectmesh(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effectmesh();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_effectmesh();
  void set_allocated_effectmesh(std::string* effectmesh);
  private:
  const std::string& _internal_effectmesh() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effectmesh(const std::string& value);
  std::string* _internal_mutable_effectmesh();
  public:

  // string effectMaterial = 15;
  void clear_effectmaterial();
  const std::string& effectmaterial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effectmaterial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effectmaterial();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_effectmaterial();
  void set_allocated_effectmaterial(std::string* effectmaterial);
  private:
  const std::string& _internal_effectmaterial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effectmaterial(const std::string& value);
  std::string* _internal_mutable_effectmaterial();
  public:

  // string explosionEffect = 18;
  void clear_explosioneffect();
  const std::string& explosioneffect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explosioneffect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explosioneffect();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explosioneffect();
  void set_allocated_explosioneffect(std::string* explosioneffect);
  private:
  const std::string& _internal_explosioneffect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explosioneffect(const std::string& value);
  std::string* _internal_mutable_explosioneffect();
  public:

  // .Protocol.PBVector effectLocation = 12;
  bool has_effectlocation() const;
  private:
  bool _internal_has_effectlocation() const;
  public:
  void clear_effectlocation();
  const ::Protocol::PBVector& effectlocation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PBVector* release_effectlocation();
  ::Protocol::PBVector* mutable_effectlocation();
  void set_allocated_effectlocation(::Protocol::PBVector* effectlocation);
  private:
  const ::Protocol::PBVector& _internal_effectlocation() const;
  ::Protocol::PBVector* _internal_mutable_effectlocation();
  public:
  void unsafe_arena_set_allocated_effectlocation(
      ::Protocol::PBVector* effectlocation);
  ::Protocol::PBVector* unsafe_arena_release_effectlocation();

  // .Protocol.PBVector effectMeshLocation = 16;
  bool has_effectmeshlocation() const;
  private:
  bool _internal_has_effectmeshlocation() const;
  public:
  void clear_effectmeshlocation();
  const ::Protocol::PBVector& effectmeshlocation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PBVector* release_effectmeshlocation();
  ::Protocol::PBVector* mutable_effectmeshlocation();
  void set_allocated_effectmeshlocation(::Protocol::PBVector* effectmeshlocation);
  private:
  const ::Protocol::PBVector& _internal_effectmeshlocation() const;
  ::Protocol::PBVector* _internal_mutable_effectmeshlocation();
  public:
  void unsafe_arena_set_allocated_effectmeshlocation(
      ::Protocol::PBVector* effectmeshlocation);
  ::Protocol::PBVector* unsafe_arena_release_effectmeshlocation();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint64 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint64 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float size = 4;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // float scale = 5;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // uint64 duration = 6;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limitDistance = 7;
  void clear_limitdistance();
  ::PROTOBUF_NAMESPACE_ID::uint64 limitdistance() const;
  void set_limitdistance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limitdistance() const;
  void _internal_set_limitdistance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 childProjectileId = 8;
  void clear_childprojectileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 childprojectileid() const;
  void set_childprojectileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_childprojectileid() const;
  void _internal_set_childprojectileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float effectScale = 13;
  void clear_effectscale();
  float effectscale() const;
  void set_effectscale(float value);
  private:
  float _internal_effectscale() const;
  void _internal_set_effectscale(float value);
  public:

  // float effectMeshScale = 17;
  void clear_effectmeshscale();
  float effectmeshscale() const;
  void set_effectmeshscale(float value);
  private:
  float _internal_effectmeshscale() const;
  void _internal_set_effectmeshscale(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcematerial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectmesh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectmaterial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explosioneffect_;
  ::Protocol::PBVector* effectlocation_;
  ::Protocol::PBVector* effectmeshlocation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 speed_;
  float size_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limitdistance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 childprojectileid_;
  float effectscale_;
  float effectmeshscale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SummonsMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SummonsMetaData) */ {
 public:
  inline SummonsMetaData() : SummonsMetaData(nullptr) {}
  ~SummonsMetaData() override;
  explicit constexpr SummonsMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummonsMetaData(const SummonsMetaData& from);
  SummonsMetaData(SummonsMetaData&& from) noexcept
    : SummonsMetaData() {
    *this = ::std::move(from);
  }

  inline SummonsMetaData& operator=(const SummonsMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummonsMetaData& operator=(SummonsMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummonsMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummonsMetaData* internal_default_instance() {
    return reinterpret_cast<const SummonsMetaData*>(
               &_SummonsMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SummonsMetaData& a, SummonsMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(SummonsMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummonsMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummonsMetaData* New() const final {
    return new SummonsMetaData();
  }

  SummonsMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummonsMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummonsMetaData& from);
  void MergeFrom(const SummonsMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummonsMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SummonsMetaData";
  }
  protected:
  explicit SummonsMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 4,
    kAnimFieldNumber = 5,
    kStatFieldNumber = 6,
    kIdFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kDurationFieldNumber = 3,
    kDetectrangeFieldNumber = 7,
    kAttrangeFieldNumber = 8,
  };
  // string resource = 4;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string anim = 5;
  void clear_anim();
  const std::string& anim() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anim(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anim();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_anim();
  void set_allocated_anim(std::string* anim);
  private:
  const std::string& _internal_anim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anim(const std::string& value);
  std::string* _internal_mutable_anim();
  public:

  // .Protocol.StatMetaData stat = 6;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::Protocol::StatMetaData& stat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::StatMetaData* release_stat();
  ::Protocol::StatMetaData* mutable_stat();
  void set_allocated_stat(::Protocol::StatMetaData* stat);
  private:
  const ::Protocol::StatMetaData& _internal_stat() const;
  ::Protocol::StatMetaData* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::Protocol::StatMetaData* stat);
  ::Protocol::StatMetaData* unsafe_arena_release_stat();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 skillId = 2;
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint64 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 detectrange = 7;
  void clear_detectrange();
  ::PROTOBUF_NAMESPACE_ID::uint64 detectrange() const;
  void set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_detectrange() const;
  void _internal_set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 attrange = 8;
  void clear_attrange();
  ::PROTOBUF_NAMESPACE_ID::uint64 attrange() const;
  void set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attrange() const;
  void _internal_set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SummonsMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anim_;
  ::Protocol::StatMetaData* stat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 detectrange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class EnemyMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnemyMetaData) */ {
 public:
  inline EnemyMetaData() : EnemyMetaData(nullptr) {}
  ~EnemyMetaData() override;
  explicit constexpr EnemyMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnemyMetaData(const EnemyMetaData& from);
  EnemyMetaData(EnemyMetaData&& from) noexcept
    : EnemyMetaData() {
    *this = ::std::move(from);
  }

  inline EnemyMetaData& operator=(const EnemyMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyMetaData& operator=(EnemyMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnemyMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnemyMetaData* internal_default_instance() {
    return reinterpret_cast<const EnemyMetaData*>(
               &_EnemyMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EnemyMetaData& a, EnemyMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnemyMetaData* New() const final {
    return new EnemyMetaData();
  }

  EnemyMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnemyMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnemyMetaData& from);
  void MergeFrom(const EnemyMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnemyMetaData";
  }
  protected:
  explicit EnemyMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 3,
    kAnimFieldNumber = 4,
    kStatFieldNumber = 5,
    kIdFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kDetectrangeFieldNumber = 7,
    kAttrangeFieldNumber = 8,
  };
  // string resource = 3;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string anim = 4;
  void clear_anim();
  const std::string& anim() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anim(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anim();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_anim();
  void set_allocated_anim(std::string* anim);
  private:
  const std::string& _internal_anim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anim(const std::string& value);
  std::string* _internal_mutable_anim();
  public:

  // .Protocol.StatMetaData stat = 5;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::Protocol::StatMetaData& stat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::StatMetaData* release_stat();
  ::Protocol::StatMetaData* mutable_stat();
  void set_allocated_stat(::Protocol::StatMetaData* stat);
  private:
  const ::Protocol::StatMetaData& _internal_stat() const;
  ::Protocol::StatMetaData* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::Protocol::StatMetaData* stat);
  ::Protocol::StatMetaData* unsafe_arena_release_stat();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 skillId = 2;
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint64 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 detectrange = 7;
  void clear_detectrange();
  ::PROTOBUF_NAMESPACE_ID::uint64 detectrange() const;
  void set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_detectrange() const;
  void _internal_set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 attrange = 8;
  void clear_attrange();
  ::PROTOBUF_NAMESPACE_ID::uint64 attrange() const;
  void set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attrange() const;
  void _internal_set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnemyMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anim_;
  ::Protocol::StatMetaData* stat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 detectrange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StatMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StatMetaData) */ {
 public:
  inline StatMetaData() : StatMetaData(nullptr) {}
  ~StatMetaData() override;
  explicit constexpr StatMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatMetaData(const StatMetaData& from);
  StatMetaData(StatMetaData&& from) noexcept
    : StatMetaData() {
    *this = ::std::move(from);
  }

  inline StatMetaData& operator=(const StatMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatMetaData& operator=(StatMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatMetaData* internal_default_instance() {
    return reinterpret_cast<const StatMetaData*>(
               &_StatMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StatMetaData& a, StatMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(StatMetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatMetaData* New() const final {
    return new StatMetaData();
  }

  StatMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatMetaData& from);
  void MergeFrom(const StatMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StatMetaData";
  }
  protected:
  explicit StatMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpFieldNumber = 1,
    kMpFieldNumber = 2,
    kExpFieldNumber = 3,
    kMaxhpFieldNumber = 4,
    kMaxmpFieldNumber = 5,
    kMaxexpFieldNumber = 6,
  };
  // uint64 hp = 1;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mp = 2;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::uint64 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exp = 3;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint64 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxhp = 4;
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxmp = 5;
  void clear_maxmp();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxmp() const;
  void set_maxmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxmp() const;
  void _internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxexp = 6;
  void clear_maxexp();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxexp() const;
  void set_maxexp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxexp() const;
  void _internal_set_maxexp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StatMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxmp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxexp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectInfo

// uint64 roomId = 1;
inline void ObjectInfo::clear_roomid() {
  roomid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.roomId)
  return _internal_roomid();
}
inline void ObjectInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomid_ = value;
}
inline void ObjectInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.roomId)
}

// .Protocol.ObjectType type = 2;
inline void ObjectInfo::clear_type() {
  type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_type() const {
  return static_cast< ::Protocol::ObjectType >(type_);
}
inline ::Protocol::ObjectType ObjectInfo::type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.type)
  return _internal_type();
}
inline void ObjectInfo::_internal_set_type(::Protocol::ObjectType value) {
  
  type_ = value;
}
inline void ObjectInfo::set_type(::Protocol::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.type)
}

// .Protocol.PBVector location = 3;
inline bool ObjectInfo::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool ObjectInfo::has_location() const {
  return _internal_has_location();
}
inline void ObjectInfo::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::Protocol::PBVector& ObjectInfo::_internal_location() const {
  const ::Protocol::PBVector* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PBVector&>(
      ::Protocol::_PBVector_default_instance_);
}
inline const ::Protocol::PBVector& ObjectInfo::location() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.location)
  return _internal_location();
}
inline void ObjectInfo::unsafe_arena_set_allocated_location(
    ::Protocol::PBVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.location)
}
inline ::Protocol::PBVector* ObjectInfo::release_location() {
  
  ::Protocol::PBVector* temp = location_;
  location_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.location)
  
  ::Protocol::PBVector* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PBVector>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::Protocol::PBVector* ObjectInfo::mutable_location() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.location)
  return _internal_mutable_location();
}
inline void ObjectInfo::set_allocated_location(::Protocol::PBVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PBVector>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.location)
}

// .Protocol.PBVector rotator = 4;
inline bool ObjectInfo::_internal_has_rotator() const {
  return this != internal_default_instance() && rotator_ != nullptr;
}
inline bool ObjectInfo::has_rotator() const {
  return _internal_has_rotator();
}
inline void ObjectInfo::clear_rotator() {
  if (GetArenaForAllocation() == nullptr && rotator_ != nullptr) {
    delete rotator_;
  }
  rotator_ = nullptr;
}
inline const ::Protocol::PBVector& ObjectInfo::_internal_rotator() const {
  const ::Protocol::PBVector* p = rotator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PBVector&>(
      ::Protocol::_PBVector_default_instance_);
}
inline const ::Protocol::PBVector& ObjectInfo::rotator() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.rotator)
  return _internal_rotator();
}
inline void ObjectInfo::unsafe_arena_set_allocated_rotator(
    ::Protocol::PBVector* rotator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotator_);
  }
  rotator_ = rotator;
  if (rotator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.rotator)
}
inline ::Protocol::PBVector* ObjectInfo::release_rotator() {
  
  ::Protocol::PBVector* temp = rotator_;
  rotator_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::unsafe_arena_release_rotator() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.rotator)
  
  ::Protocol::PBVector* temp = rotator_;
  rotator_ = nullptr;
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::_internal_mutable_rotator() {
  
  if (rotator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PBVector>(GetArenaForAllocation());
    rotator_ = p;
  }
  return rotator_;
}
inline ::Protocol::PBVector* ObjectInfo::mutable_rotator() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.rotator)
  return _internal_mutable_rotator();
}
inline void ObjectInfo::set_allocated_rotator(::Protocol::PBVector* rotator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotator_;
  }
  if (rotator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PBVector>::GetOwningArena(rotator);
    if (message_arena != submessage_arena) {
      rotator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotator, submessage_arena);
    }
    
  } else {
    
  }
  rotator_ = rotator;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.rotator)
}

// .Protocol.PBVector forwardDir = 5;
inline bool ObjectInfo::_internal_has_forwarddir() const {
  return this != internal_default_instance() && forwarddir_ != nullptr;
}
inline bool ObjectInfo::has_forwarddir() const {
  return _internal_has_forwarddir();
}
inline void ObjectInfo::clear_forwarddir() {
  if (GetArenaForAllocation() == nullptr && forwarddir_ != nullptr) {
    delete forwarddir_;
  }
  forwarddir_ = nullptr;
}
inline const ::Protocol::PBVector& ObjectInfo::_internal_forwarddir() const {
  const ::Protocol::PBVector* p = forwarddir_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PBVector&>(
      ::Protocol::_PBVector_default_instance_);
}
inline const ::Protocol::PBVector& ObjectInfo::forwarddir() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.forwardDir)
  return _internal_forwarddir();
}
inline void ObjectInfo::unsafe_arena_set_allocated_forwarddir(
    ::Protocol::PBVector* forwarddir) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forwarddir_);
  }
  forwarddir_ = forwarddir;
  if (forwarddir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.forwardDir)
}
inline ::Protocol::PBVector* ObjectInfo::release_forwarddir() {
  
  ::Protocol::PBVector* temp = forwarddir_;
  forwarddir_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::unsafe_arena_release_forwarddir() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.forwardDir)
  
  ::Protocol::PBVector* temp = forwarddir_;
  forwarddir_ = nullptr;
  return temp;
}
inline ::Protocol::PBVector* ObjectInfo::_internal_mutable_forwarddir() {
  
  if (forwarddir_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PBVector>(GetArenaForAllocation());
    forwarddir_ = p;
  }
  return forwarddir_;
}
inline ::Protocol::PBVector* ObjectInfo::mutable_forwarddir() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.forwardDir)
  return _internal_mutable_forwarddir();
}
inline void ObjectInfo::set_allocated_forwarddir(::Protocol::PBVector* forwarddir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete forwarddir_;
  }
  if (forwarddir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PBVector>::GetOwningArena(forwarddir);
    if (message_arena != submessage_arena) {
      forwarddir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwarddir, submessage_arena);
    }
    
  } else {
    
  }
  forwarddir_ = forwarddir;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.forwardDir)
}

// float scale = 6;
inline void ObjectInfo::clear_scale() {
  scale_ = 0;
}
inline float ObjectInfo::_internal_scale() const {
  return scale_;
}
inline float ObjectInfo::scale() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.scale)
  return _internal_scale();
}
inline void ObjectInfo::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void ObjectInfo::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.scale)
}

// uint64 metaId = 7;
inline void ObjectInfo::clear_metaid() {
  metaid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectInfo::_internal_metaid() const {
  return metaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectInfo::metaid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.metaId)
  return _internal_metaid();
}
inline void ObjectInfo::_internal_set_metaid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metaid_ = value;
}
inline void ObjectInfo::set_metaid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_metaid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.metaId)
}

// string name = 8;
inline void ObjectInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ObjectInfo::_internal_name() const {
  return name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.name)
}

// -------------------------------------------------------------------

// PBVector

// float x = 1;
inline void PBVector::clear_x() {
  x_ = 0;
}
inline float PBVector::_internal_x() const {
  return x_;
}
inline float PBVector::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PBVector.x)
  return _internal_x();
}
inline void PBVector::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PBVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PBVector.x)
}

// float y = 2;
inline void PBVector::clear_y() {
  y_ = 0;
}
inline float PBVector::_internal_y() const {
  return y_;
}
inline float PBVector::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PBVector.y)
  return _internal_y();
}
inline void PBVector::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PBVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PBVector.y)
}

// float z = 3;
inline void PBVector::clear_z() {
  z_ = 0;
}
inline float PBVector::_internal_z() const {
  return z_;
}
inline float PBVector::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PBVector.z)
  return _internal_z();
}
inline void PBVector::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PBVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PBVector.z)
}

// -------------------------------------------------------------------

// PBCharacterData

// uint64 id = 1;
inline void PBCharacterData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBCharacterData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBCharacterData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.id)
  return _internal_id();
}
inline void PBCharacterData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void PBCharacterData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.id)
}

// uint64 level = 2;
inline void PBCharacterData::clear_level() {
  level_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBCharacterData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBCharacterData::level() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.level)
  return _internal_level();
}
inline void PBCharacterData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  level_ = value;
}
inline void PBCharacterData::set_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.level)
}

// .Protocol.CharacterMetaData charMeta = 3;
inline bool PBCharacterData::_internal_has_charmeta() const {
  return this != internal_default_instance() && charmeta_ != nullptr;
}
inline bool PBCharacterData::has_charmeta() const {
  return _internal_has_charmeta();
}
inline void PBCharacterData::clear_charmeta() {
  if (GetArenaForAllocation() == nullptr && charmeta_ != nullptr) {
    delete charmeta_;
  }
  charmeta_ = nullptr;
}
inline const ::Protocol::CharacterMetaData& PBCharacterData::_internal_charmeta() const {
  const ::Protocol::CharacterMetaData* p = charmeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CharacterMetaData&>(
      ::Protocol::_CharacterMetaData_default_instance_);
}
inline const ::Protocol::CharacterMetaData& PBCharacterData::charmeta() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.charMeta)
  return _internal_charmeta();
}
inline void PBCharacterData::unsafe_arena_set_allocated_charmeta(
    ::Protocol::CharacterMetaData* charmeta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charmeta_);
  }
  charmeta_ = charmeta;
  if (charmeta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PBCharacterData.charMeta)
}
inline ::Protocol::CharacterMetaData* PBCharacterData::release_charmeta() {
  
  ::Protocol::CharacterMetaData* temp = charmeta_;
  charmeta_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::CharacterMetaData* PBCharacterData::unsafe_arena_release_charmeta() {
  // @@protoc_insertion_point(field_release:Protocol.PBCharacterData.charMeta)
  
  ::Protocol::CharacterMetaData* temp = charmeta_;
  charmeta_ = nullptr;
  return temp;
}
inline ::Protocol::CharacterMetaData* PBCharacterData::_internal_mutable_charmeta() {
  
  if (charmeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CharacterMetaData>(GetArenaForAllocation());
    charmeta_ = p;
  }
  return charmeta_;
}
inline ::Protocol::CharacterMetaData* PBCharacterData::mutable_charmeta() {
  // @@protoc_insertion_point(field_mutable:Protocol.PBCharacterData.charMeta)
  return _internal_mutable_charmeta();
}
inline void PBCharacterData::set_allocated_charmeta(::Protocol::CharacterMetaData* charmeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete charmeta_;
  }
  if (charmeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::CharacterMetaData>::GetOwningArena(charmeta);
    if (message_arena != submessage_arena) {
      charmeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charmeta, submessage_arena);
    }
    
  } else {
    
  }
  charmeta_ = charmeta;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PBCharacterData.charMeta)
}

// repeated .Protocol.PBSkillData skills = 4;
inline int PBCharacterData::_internal_skills_size() const {
  return skills_.size();
}
inline int PBCharacterData::skills_size() const {
  return _internal_skills_size();
}
inline void PBCharacterData::clear_skills() {
  skills_.Clear();
}
inline ::Protocol::PBSkillData* PBCharacterData::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.PBCharacterData.skills)
  return skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PBSkillData >*
PBCharacterData::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.PBCharacterData.skills)
  return &skills_;
}
inline const ::Protocol::PBSkillData& PBCharacterData::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const ::Protocol::PBSkillData& PBCharacterData::skills(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.skills)
  return _internal_skills(index);
}
inline ::Protocol::PBSkillData* PBCharacterData::_internal_add_skills() {
  return skills_.Add();
}
inline ::Protocol::PBSkillData* PBCharacterData::add_skills() {
  // @@protoc_insertion_point(field_add:Protocol.PBCharacterData.skills)
  return _internal_add_skills();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PBSkillData >&
PBCharacterData::skills() const {
  // @@protoc_insertion_point(field_list:Protocol.PBCharacterData.skills)
  return skills_;
}

// float hp = 5;
inline void PBCharacterData::clear_hp() {
  hp_ = 0;
}
inline float PBCharacterData::_internal_hp() const {
  return hp_;
}
inline float PBCharacterData::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.hp)
  return _internal_hp();
}
inline void PBCharacterData::_internal_set_hp(float value) {
  
  hp_ = value;
}
inline void PBCharacterData::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.hp)
}

// float mp = 6;
inline void PBCharacterData::clear_mp() {
  mp_ = 0;
}
inline float PBCharacterData::_internal_mp() const {
  return mp_;
}
inline float PBCharacterData::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.mp)
  return _internal_mp();
}
inline void PBCharacterData::_internal_set_mp(float value) {
  
  mp_ = value;
}
inline void PBCharacterData::set_mp(float value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.mp)
}

// float maxhp = 7;
inline void PBCharacterData::clear_maxhp() {
  maxhp_ = 0;
}
inline float PBCharacterData::_internal_maxhp() const {
  return maxhp_;
}
inline float PBCharacterData::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.maxhp)
  return _internal_maxhp();
}
inline void PBCharacterData::_internal_set_maxhp(float value) {
  
  maxhp_ = value;
}
inline void PBCharacterData::set_maxhp(float value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.maxhp)
}

// float maxmp = 8;
inline void PBCharacterData::clear_maxmp() {
  maxmp_ = 0;
}
inline float PBCharacterData::_internal_maxmp() const {
  return maxmp_;
}
inline float PBCharacterData::maxmp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.maxmp)
  return _internal_maxmp();
}
inline void PBCharacterData::_internal_set_maxmp(float value) {
  
  maxmp_ = value;
}
inline void PBCharacterData::set_maxmp(float value) {
  _internal_set_maxmp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.maxmp)
}

// float exp = 9;
inline void PBCharacterData::clear_exp() {
  exp_ = 0;
}
inline float PBCharacterData::_internal_exp() const {
  return exp_;
}
inline float PBCharacterData::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.exp)
  return _internal_exp();
}
inline void PBCharacterData::_internal_set_exp(float value) {
  
  exp_ = value;
}
inline void PBCharacterData::set_exp(float value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.exp)
}

// float maxexp = 10;
inline void PBCharacterData::clear_maxexp() {
  maxexp_ = 0;
}
inline float PBCharacterData::_internal_maxexp() const {
  return maxexp_;
}
inline float PBCharacterData::maxexp() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.maxexp)
  return _internal_maxexp();
}
inline void PBCharacterData::_internal_set_maxexp(float value) {
  
  maxexp_ = value;
}
inline void PBCharacterData::set_maxexp(float value) {
  _internal_set_maxexp(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.maxexp)
}

// float gold = 11;
inline void PBCharacterData::clear_gold() {
  gold_ = 0;
}
inline float PBCharacterData::_internal_gold() const {
  return gold_;
}
inline float PBCharacterData::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.PBCharacterData.gold)
  return _internal_gold();
}
inline void PBCharacterData::_internal_set_gold(float value) {
  
  gold_ = value;
}
inline void PBCharacterData::set_gold(float value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.PBCharacterData.gold)
}

// -------------------------------------------------------------------

// PBItemData

// .Protocol.DataType type = 1;
inline void PBItemData::clear_type() {
  type_ = 0;
}
inline ::Protocol::DataType PBItemData::_internal_type() const {
  return static_cast< ::Protocol::DataType >(type_);
}
inline ::Protocol::DataType PBItemData::type() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.type)
  return _internal_type();
}
inline void PBItemData::_internal_set_type(::Protocol::DataType value) {
  
  type_ = value;
}
inline void PBItemData::set_type(::Protocol::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.PBItemData.type)
}

// .Protocol.ConsumMetaData consumData = 2;
inline bool PBItemData::_internal_has_consumdata() const {
  return this != internal_default_instance() && consumdata_ != nullptr;
}
inline bool PBItemData::has_consumdata() const {
  return _internal_has_consumdata();
}
inline void PBItemData::clear_consumdata() {
  if (GetArenaForAllocation() == nullptr && consumdata_ != nullptr) {
    delete consumdata_;
  }
  consumdata_ = nullptr;
}
inline const ::Protocol::ConsumMetaData& PBItemData::_internal_consumdata() const {
  const ::Protocol::ConsumMetaData* p = consumdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ConsumMetaData&>(
      ::Protocol::_ConsumMetaData_default_instance_);
}
inline const ::Protocol::ConsumMetaData& PBItemData::consumdata() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.consumData)
  return _internal_consumdata();
}
inline void PBItemData::unsafe_arena_set_allocated_consumdata(
    ::Protocol::ConsumMetaData* consumdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumdata_);
  }
  consumdata_ = consumdata;
  if (consumdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PBItemData.consumData)
}
inline ::Protocol::ConsumMetaData* PBItemData::release_consumdata() {
  
  ::Protocol::ConsumMetaData* temp = consumdata_;
  consumdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ConsumMetaData* PBItemData::unsafe_arena_release_consumdata() {
  // @@protoc_insertion_point(field_release:Protocol.PBItemData.consumData)
  
  ::Protocol::ConsumMetaData* temp = consumdata_;
  consumdata_ = nullptr;
  return temp;
}
inline ::Protocol::ConsumMetaData* PBItemData::_internal_mutable_consumdata() {
  
  if (consumdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ConsumMetaData>(GetArenaForAllocation());
    consumdata_ = p;
  }
  return consumdata_;
}
inline ::Protocol::ConsumMetaData* PBItemData::mutable_consumdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.PBItemData.consumData)
  return _internal_mutable_consumdata();
}
inline void PBItemData::set_allocated_consumdata(::Protocol::ConsumMetaData* consumdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete consumdata_;
  }
  if (consumdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::ConsumMetaData>::GetOwningArena(consumdata);
    if (message_arena != submessage_arena) {
      consumdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumdata, submessage_arena);
    }
    
  } else {
    
  }
  consumdata_ = consumdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PBItemData.consumData)
}

// uint64 count = 3;
inline void PBItemData::clear_count() {
  count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::count() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.count)
  return _internal_count();
}
inline void PBItemData::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void PBItemData::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.PBItemData.count)
}

// .Protocol.EquipMetaData equipData = 4;
inline bool PBItemData::_internal_has_equipdata() const {
  return this != internal_default_instance() && equipdata_ != nullptr;
}
inline bool PBItemData::has_equipdata() const {
  return _internal_has_equipdata();
}
inline void PBItemData::clear_equipdata() {
  if (GetArenaForAllocation() == nullptr && equipdata_ != nullptr) {
    delete equipdata_;
  }
  equipdata_ = nullptr;
}
inline const ::Protocol::EquipMetaData& PBItemData::_internal_equipdata() const {
  const ::Protocol::EquipMetaData* p = equipdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EquipMetaData&>(
      ::Protocol::_EquipMetaData_default_instance_);
}
inline const ::Protocol::EquipMetaData& PBItemData::equipdata() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.equipData)
  return _internal_equipdata();
}
inline void PBItemData::unsafe_arena_set_allocated_equipdata(
    ::Protocol::EquipMetaData* equipdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipdata_);
  }
  equipdata_ = equipdata;
  if (equipdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PBItemData.equipData)
}
inline ::Protocol::EquipMetaData* PBItemData::release_equipdata() {
  
  ::Protocol::EquipMetaData* temp = equipdata_;
  equipdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::EquipMetaData* PBItemData::unsafe_arena_release_equipdata() {
  // @@protoc_insertion_point(field_release:Protocol.PBItemData.equipData)
  
  ::Protocol::EquipMetaData* temp = equipdata_;
  equipdata_ = nullptr;
  return temp;
}
inline ::Protocol::EquipMetaData* PBItemData::_internal_mutable_equipdata() {
  
  if (equipdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EquipMetaData>(GetArenaForAllocation());
    equipdata_ = p;
  }
  return equipdata_;
}
inline ::Protocol::EquipMetaData* PBItemData::mutable_equipdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.PBItemData.equipData)
  return _internal_mutable_equipdata();
}
inline void PBItemData::set_allocated_equipdata(::Protocol::EquipMetaData* equipdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete equipdata_;
  }
  if (equipdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::EquipMetaData>::GetOwningArena(equipdata);
    if (message_arena != submessage_arena) {
      equipdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipdata, submessage_arena);
    }
    
  } else {
    
  }
  equipdata_ = equipdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PBItemData.equipData)
}

// uint64 upgrade = 5;
inline void PBItemData::clear_upgrade() {
  upgrade_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::_internal_upgrade() const {
  return upgrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::upgrade() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.upgrade)
  return _internal_upgrade();
}
inline void PBItemData::_internal_set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  upgrade_ = value;
}
inline void PBItemData::set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_upgrade(value);
  // @@protoc_insertion_point(field_set:Protocol.PBItemData.upgrade)
}

// uint64 idx = 6;
inline void PBItemData::clear_idx() {
  idx_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBItemData::idx() const {
  // @@protoc_insertion_point(field_get:Protocol.PBItemData.idx)
  return _internal_idx();
}
inline void PBItemData::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idx_ = value;
}
inline void PBItemData::set_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:Protocol.PBItemData.idx)
}

// -------------------------------------------------------------------

// PBSkillData

// uint64 id = 1;
inline void PBSkillData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBSkillData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBSkillData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.PBSkillData.id)
  return _internal_id();
}
inline void PBSkillData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void PBSkillData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PBSkillData.id)
}

// uint64 upgrade = 2;
inline void PBSkillData::clear_upgrade() {
  upgrade_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBSkillData::_internal_upgrade() const {
  return upgrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PBSkillData::upgrade() const {
  // @@protoc_insertion_point(field_get:Protocol.PBSkillData.upgrade)
  return _internal_upgrade();
}
inline void PBSkillData::_internal_set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  upgrade_ = value;
}
inline void PBSkillData::set_upgrade(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_upgrade(value);
  // @@protoc_insertion_point(field_set:Protocol.PBSkillData.upgrade)
}

// .Protocol.SkillMetaData skillMeta = 3;
inline bool PBSkillData::_internal_has_skillmeta() const {
  return this != internal_default_instance() && skillmeta_ != nullptr;
}
inline bool PBSkillData::has_skillmeta() const {
  return _internal_has_skillmeta();
}
inline void PBSkillData::clear_skillmeta() {
  if (GetArenaForAllocation() == nullptr && skillmeta_ != nullptr) {
    delete skillmeta_;
  }
  skillmeta_ = nullptr;
}
inline const ::Protocol::SkillMetaData& PBSkillData::_internal_skillmeta() const {
  const ::Protocol::SkillMetaData* p = skillmeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SkillMetaData&>(
      ::Protocol::_SkillMetaData_default_instance_);
}
inline const ::Protocol::SkillMetaData& PBSkillData::skillmeta() const {
  // @@protoc_insertion_point(field_get:Protocol.PBSkillData.skillMeta)
  return _internal_skillmeta();
}
inline void PBSkillData::unsafe_arena_set_allocated_skillmeta(
    ::Protocol::SkillMetaData* skillmeta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skillmeta_);
  }
  skillmeta_ = skillmeta;
  if (skillmeta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PBSkillData.skillMeta)
}
inline ::Protocol::SkillMetaData* PBSkillData::release_skillmeta() {
  
  ::Protocol::SkillMetaData* temp = skillmeta_;
  skillmeta_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::SkillMetaData* PBSkillData::unsafe_arena_release_skillmeta() {
  // @@protoc_insertion_point(field_release:Protocol.PBSkillData.skillMeta)
  
  ::Protocol::SkillMetaData* temp = skillmeta_;
  skillmeta_ = nullptr;
  return temp;
}
inline ::Protocol::SkillMetaData* PBSkillData::_internal_mutable_skillmeta() {
  
  if (skillmeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SkillMetaData>(GetArenaForAllocation());
    skillmeta_ = p;
  }
  return skillmeta_;
}
inline ::Protocol::SkillMetaData* PBSkillData::mutable_skillmeta() {
  // @@protoc_insertion_point(field_mutable:Protocol.PBSkillData.skillMeta)
  return _internal_mutable_skillmeta();
}
inline void PBSkillData::set_allocated_skillmeta(::Protocol::SkillMetaData* skillmeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete skillmeta_;
  }
  if (skillmeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::SkillMetaData>::GetOwningArena(skillmeta);
    if (message_arena != submessage_arena) {
      skillmeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skillmeta, submessage_arena);
    }
    
  } else {
    
  }
  skillmeta_ = skillmeta;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PBSkillData.skillMeta)
}

// -------------------------------------------------------------------

// CharacterMetaData

// uint64 id = 1;
inline void CharacterMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.id)
  return _internal_id();
}
inline void CharacterMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CharacterMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterMetaData.id)
}

// string resource = 2;
inline void CharacterMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& CharacterMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CharacterMetaData.resource)
}
inline std::string* CharacterMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& CharacterMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void CharacterMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.CharacterMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterMetaData.resource)
}

// string anim = 3;
inline void CharacterMetaData::clear_anim() {
  anim_.ClearToEmpty();
}
inline const std::string& CharacterMetaData::anim() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.anim)
  return _internal_anim();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterMetaData::set_anim(ArgT0&& arg0, ArgT... args) {
 
 anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CharacterMetaData.anim)
}
inline std::string* CharacterMetaData::mutable_anim() {
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterMetaData.anim)
  return _internal_mutable_anim();
}
inline const std::string& CharacterMetaData::_internal_anim() const {
  return anim_.Get();
}
inline void CharacterMetaData::_internal_set_anim(const std::string& value) {
  
  anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterMetaData::_internal_mutable_anim() {
  
  return anim_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterMetaData::release_anim() {
  // @@protoc_insertion_point(field_release:Protocol.CharacterMetaData.anim)
  return anim_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterMetaData::set_allocated_anim(std::string* anim) {
  if (anim != nullptr) {
    
  } else {
    
  }
  anim_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anim,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterMetaData.anim)
}

// .Protocol.PlayerType type = 4;
inline void CharacterMetaData::clear_type() {
  type_ = 0;
}
inline ::Protocol::PlayerType CharacterMetaData::_internal_type() const {
  return static_cast< ::Protocol::PlayerType >(type_);
}
inline ::Protocol::PlayerType CharacterMetaData::type() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.type)
  return _internal_type();
}
inline void CharacterMetaData::_internal_set_type(::Protocol::PlayerType value) {
  
  type_ = value;
}
inline void CharacterMetaData::set_type(::Protocol::PlayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterMetaData.type)
}

// repeated uint64 skills = 5;
inline int CharacterMetaData::_internal_skills_size() const {
  return skills_.size();
}
inline int CharacterMetaData::skills_size() const {
  return _internal_skills_size();
}
inline void CharacterMetaData::clear_skills() {
  skills_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterMetaData::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterMetaData::skills(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.skills)
  return _internal_skills(index);
}
inline void CharacterMetaData::set_skills(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  skills_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterMetaData.skills)
}
inline void CharacterMetaData::_internal_add_skills(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  skills_.Add(value);
}
inline void CharacterMetaData::add_skills(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_skills(value);
  // @@protoc_insertion_point(field_add:Protocol.CharacterMetaData.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CharacterMetaData::_internal_skills() const {
  return skills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CharacterMetaData::skills() const {
  // @@protoc_insertion_point(field_list:Protocol.CharacterMetaData.skills)
  return _internal_skills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CharacterMetaData::_internal_mutable_skills() {
  return &skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CharacterMetaData::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.CharacterMetaData.skills)
  return _internal_mutable_skills();
}

// .Protocol.StatMetaData stat = 6;
inline bool CharacterMetaData::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool CharacterMetaData::has_stat() const {
  return _internal_has_stat();
}
inline void CharacterMetaData::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::Protocol::StatMetaData& CharacterMetaData::_internal_stat() const {
  const ::Protocol::StatMetaData* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatMetaData&>(
      ::Protocol::_StatMetaData_default_instance_);
}
inline const ::Protocol::StatMetaData& CharacterMetaData::stat() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterMetaData.stat)
  return _internal_stat();
}
inline void CharacterMetaData::unsafe_arena_set_allocated_stat(
    ::Protocol::StatMetaData* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CharacterMetaData.stat)
}
inline ::Protocol::StatMetaData* CharacterMetaData::release_stat() {
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::StatMetaData* CharacterMetaData::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:Protocol.CharacterMetaData.stat)
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::Protocol::StatMetaData* CharacterMetaData::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatMetaData>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::Protocol::StatMetaData* CharacterMetaData::mutable_stat() {
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterMetaData.stat)
  return _internal_mutable_stat();
}
inline void CharacterMetaData::set_allocated_stat(::Protocol::StatMetaData* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::StatMetaData>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterMetaData.stat)
}

// -------------------------------------------------------------------

// SkillMetaData

// uint64 id = 1;
inline void SkillMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.id)
  return _internal_id();
}
inline void SkillMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SkillMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.id)
}

// string name = 2;
inline void SkillMetaData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SkillMetaData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillMetaData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.name)
}
inline std::string* SkillMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.SkillMetaData.name)
  return _internal_mutable_name();
}
inline const std::string& SkillMetaData::_internal_name() const {
  return name_.Get();
}
inline void SkillMetaData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SkillMetaData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SkillMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.SkillMetaData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SkillMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SkillMetaData.name)
}

// float cooldown = 3;
inline void SkillMetaData::clear_cooldown() {
  cooldown_ = 0;
}
inline float SkillMetaData::_internal_cooldown() const {
  return cooldown_;
}
inline float SkillMetaData::cooldown() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.cooldown)
  return _internal_cooldown();
}
inline void SkillMetaData::_internal_set_cooldown(float value) {
  
  cooldown_ = value;
}
inline void SkillMetaData::set_cooldown(float value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.cooldown)
}

// uint64 damage = 4;
inline void SkillMetaData::clear_damage() {
  damage_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.damage)
  return _internal_damage();
}
inline void SkillMetaData::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  damage_ = value;
}
inline void SkillMetaData::set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.damage)
}

// uint64 mpconsumption = 5;
inline void SkillMetaData::clear_mpconsumption() {
  mpconsumption_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::_internal_mpconsumption() const {
  return mpconsumption_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SkillMetaData::mpconsumption() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.mpconsumption)
  return _internal_mpconsumption();
}
inline void SkillMetaData::_internal_set_mpconsumption(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mpconsumption_ = value;
}
inline void SkillMetaData::set_mpconsumption(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mpconsumption(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.mpconsumption)
}

// string resource = 6;
inline void SkillMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& SkillMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SkillMetaData.resource)
}
inline std::string* SkillMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.SkillMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& SkillMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void SkillMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SkillMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SkillMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.SkillMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SkillMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SkillMetaData.resource)
}

// -------------------------------------------------------------------

// ProjectileInfo

// string name = 1;
inline void ProjectileInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProjectileInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.name)
}
inline std::string* ProjectileInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ProjectileInfo::_internal_name() const {
  return name_.Get();
}
inline void ProjectileInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileInfo.name)
}

// float speed = 2;
inline void ProjectileInfo::clear_speed() {
  speed_ = 0;
}
inline float ProjectileInfo::_internal_speed() const {
  return speed_;
}
inline float ProjectileInfo::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.speed)
  return _internal_speed();
}
inline void ProjectileInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void ProjectileInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.speed)
}

// float range = 3;
inline void ProjectileInfo::clear_range() {
  range_ = 0;
}
inline float ProjectileInfo::_internal_range() const {
  return range_;
}
inline float ProjectileInfo::range() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.range)
  return _internal_range();
}
inline void ProjectileInfo::_internal_set_range(float value) {
  
  range_ = value;
}
inline void ProjectileInfo::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.range)
}

// string sourceName = 4;
inline void ProjectileInfo::clear_sourcename() {
  sourcename_.ClearToEmpty();
}
inline const std::string& ProjectileInfo::sourcename() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.sourceName)
  return _internal_sourcename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileInfo::set_sourcename(ArgT0&& arg0, ArgT... args) {
 
 sourcename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.sourceName)
}
inline std::string* ProjectileInfo::mutable_sourcename() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileInfo.sourceName)
  return _internal_mutable_sourcename();
}
inline const std::string& ProjectileInfo::_internal_sourcename() const {
  return sourcename_.Get();
}
inline void ProjectileInfo::_internal_set_sourcename(const std::string& value) {
  
  sourcename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileInfo::_internal_mutable_sourcename() {
  
  return sourcename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileInfo::release_sourcename() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileInfo.sourceName)
  return sourcename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileInfo::set_allocated_sourcename(std::string* sourcename) {
  if (sourcename != nullptr) {
    
  } else {
    
  }
  sourcename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileInfo.sourceName)
}

// -------------------------------------------------------------------

// ConsumMetaData

// uint64 id = 1;
inline void ConsumMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.id)
  return _internal_id();
}
inline void ConsumMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ConsumMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.id)
}

// string name = 2;
inline void ConsumMetaData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ConsumMetaData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumMetaData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.name)
}
inline std::string* ConsumMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.ConsumMetaData.name)
  return _internal_mutable_name();
}
inline const std::string& ConsumMetaData::_internal_name() const {
  return name_.Get();
}
inline void ConsumMetaData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ConsumMetaData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsumMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ConsumMetaData.name)
}

// uint64 hp = 3;
inline void ConsumMetaData::clear_hp() {
  hp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.hp)
  return _internal_hp();
}
inline void ConsumMetaData::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hp_ = value;
}
inline void ConsumMetaData::set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.hp)
}

// uint64 mp = 4;
inline void ConsumMetaData::clear_mp() {
  mp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.mp)
  return _internal_mp();
}
inline void ConsumMetaData::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mp_ = value;
}
inline void ConsumMetaData::set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.mp)
}

// uint64 percentage = 5;
inline void ConsumMetaData::clear_percentage() {
  percentage_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::_internal_percentage() const {
  return percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::percentage() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.percentage)
  return _internal_percentage();
}
inline void ConsumMetaData::_internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  percentage_ = value;
}
inline void ConsumMetaData::set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.percentage)
}

// uint64 price = 6;
inline void ConsumMetaData::clear_price() {
  price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsumMetaData::price() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.price)
  return _internal_price();
}
inline void ConsumMetaData::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void ConsumMetaData::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.price)
}

// string resource = 7;
inline void ConsumMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& ConsumMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.resource)
}
inline std::string* ConsumMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.ConsumMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& ConsumMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void ConsumMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.ConsumMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsumMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ConsumMetaData.resource)
}

// string desc = 8;
inline void ConsumMetaData::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ConsumMetaData::desc() const {
  // @@protoc_insertion_point(field_get:Protocol.ConsumMetaData.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumMetaData::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ConsumMetaData.desc)
}
inline std::string* ConsumMetaData::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:Protocol.ConsumMetaData.desc)
  return _internal_mutable_desc();
}
inline const std::string& ConsumMetaData::_internal_desc() const {
  return desc_.Get();
}
inline void ConsumMetaData::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsumMetaData::release_desc() {
  // @@protoc_insertion_point(field_release:Protocol.ConsumMetaData.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsumMetaData::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ConsumMetaData.desc)
}

// -------------------------------------------------------------------

// EquipMetaData

// uint64 id = 1;
inline void EquipMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.id)
  return _internal_id();
}
inline void EquipMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void EquipMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.id)
}

// string name = 2;
inline void EquipMetaData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EquipMetaData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EquipMetaData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.name)
}
inline std::string* EquipMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.EquipMetaData.name)
  return _internal_mutable_name();
}
inline const std::string& EquipMetaData::_internal_name() const {
  return name_.Get();
}
inline void EquipMetaData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EquipMetaData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EquipMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.EquipMetaData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EquipMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EquipMetaData.name)
}

// uint64 attack = 3;
inline void EquipMetaData::clear_attack() {
  attack_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::_internal_attack() const {
  return attack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.attack)
  return _internal_attack();
}
inline void EquipMetaData::_internal_set_attack(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attack_ = value;
}
inline void EquipMetaData::set_attack(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.attack)
}

// uint64 defense = 4;
inline void EquipMetaData::clear_defense() {
  defense_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::_internal_defense() const {
  return defense_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::defense() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.defense)
  return _internal_defense();
}
inline void EquipMetaData::_internal_set_defense(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  defense_ = value;
}
inline void EquipMetaData::set_defense(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.defense)
}

// .Protocol.EquipType equiptype = 5;
inline void EquipMetaData::clear_equiptype() {
  equiptype_ = 0;
}
inline ::Protocol::EquipType EquipMetaData::_internal_equiptype() const {
  return static_cast< ::Protocol::EquipType >(equiptype_);
}
inline ::Protocol::EquipType EquipMetaData::equiptype() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.equiptype)
  return _internal_equiptype();
}
inline void EquipMetaData::_internal_set_equiptype(::Protocol::EquipType value) {
  
  equiptype_ = value;
}
inline void EquipMetaData::set_equiptype(::Protocol::EquipType value) {
  _internal_set_equiptype(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.equiptype)
}

// uint64 percentage = 6;
inline void EquipMetaData::clear_percentage() {
  percentage_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::_internal_percentage() const {
  return percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::percentage() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.percentage)
  return _internal_percentage();
}
inline void EquipMetaData::_internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  percentage_ = value;
}
inline void EquipMetaData::set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.percentage)
}

// uint64 price = 7;
inline void EquipMetaData::clear_price() {
  price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EquipMetaData::price() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.price)
  return _internal_price();
}
inline void EquipMetaData::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void EquipMetaData::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.price)
}

// string resource = 8;
inline void EquipMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& EquipMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.EquipMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EquipMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EquipMetaData.resource)
}
inline std::string* EquipMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.EquipMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& EquipMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void EquipMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EquipMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EquipMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.EquipMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EquipMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EquipMetaData.resource)
}

// -------------------------------------------------------------------

// NPCMetaData

// uint64 id = 1;
inline void NPCMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NPCMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NPCMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.NPCMetaData.id)
  return _internal_id();
}
inline void NPCMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void NPCMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.NPCMetaData.id)
}

// string name = 2;
inline void NPCMetaData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NPCMetaData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.NPCMetaData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NPCMetaData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.NPCMetaData.name)
}
inline std::string* NPCMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.NPCMetaData.name)
  return _internal_mutable_name();
}
inline const std::string& NPCMetaData::_internal_name() const {
  return name_.Get();
}
inline void NPCMetaData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NPCMetaData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NPCMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.NPCMetaData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NPCMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.NPCMetaData.name)
}

// repeated uint64 ids = 3;
inline int NPCMetaData::_internal_ids_size() const {
  return ids_.size();
}
inline int NPCMetaData::ids_size() const {
  return _internal_ids_size();
}
inline void NPCMetaData::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NPCMetaData::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NPCMetaData::ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.NPCMetaData.ids)
  return _internal_ids(index);
}
inline void NPCMetaData::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.NPCMetaData.ids)
}
inline void NPCMetaData::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Add(value);
}
inline void NPCMetaData::add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.NPCMetaData.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NPCMetaData::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NPCMetaData::ids() const {
  // @@protoc_insertion_point(field_list:Protocol.NPCMetaData.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NPCMetaData::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NPCMetaData::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.NPCMetaData.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// ProjectileMetaData

// uint64 id = 1;
inline void ProjectileMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.id)
  return _internal_id();
}
inline void ProjectileMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ProjectileMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.id)
}

// uint64 damage = 2;
inline void ProjectileMetaData::clear_damage() {
  damage_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.damage)
  return _internal_damage();
}
inline void ProjectileMetaData::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  damage_ = value;
}
inline void ProjectileMetaData::set_damage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.damage)
}

// uint64 speed = 3;
inline void ProjectileMetaData::clear_speed() {
  speed_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.speed)
  return _internal_speed();
}
inline void ProjectileMetaData::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  speed_ = value;
}
inline void ProjectileMetaData::set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.speed)
}

// float size = 4;
inline void ProjectileMetaData::clear_size() {
  size_ = 0;
}
inline float ProjectileMetaData::_internal_size() const {
  return size_;
}
inline float ProjectileMetaData::size() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.size)
  return _internal_size();
}
inline void ProjectileMetaData::_internal_set_size(float value) {
  
  size_ = value;
}
inline void ProjectileMetaData::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.size)
}

// float scale = 5;
inline void ProjectileMetaData::clear_scale() {
  scale_ = 0;
}
inline float ProjectileMetaData::_internal_scale() const {
  return scale_;
}
inline float ProjectileMetaData::scale() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.scale)
  return _internal_scale();
}
inline void ProjectileMetaData::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void ProjectileMetaData::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.scale)
}

// uint64 duration = 6;
inline void ProjectileMetaData::clear_duration() {
  duration_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.duration)
  return _internal_duration();
}
inline void ProjectileMetaData::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ = value;
}
inline void ProjectileMetaData::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.duration)
}

// uint64 limitDistance = 7;
inline void ProjectileMetaData::clear_limitdistance() {
  limitdistance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_limitdistance() const {
  return limitdistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::limitdistance() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.limitDistance)
  return _internal_limitdistance();
}
inline void ProjectileMetaData::_internal_set_limitdistance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limitdistance_ = value;
}
inline void ProjectileMetaData::set_limitdistance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limitdistance(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.limitDistance)
}

// uint64 childProjectileId = 8;
inline void ProjectileMetaData::clear_childprojectileid() {
  childprojectileid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::_internal_childprojectileid() const {
  return childprojectileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectileMetaData::childprojectileid() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.childProjectileId)
  return _internal_childprojectileid();
}
inline void ProjectileMetaData::_internal_set_childprojectileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  childprojectileid_ = value;
}
inline void ProjectileMetaData::set_childprojectileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_childprojectileid(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.childProjectileId)
}

// string resource = 9;
inline void ProjectileMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.resource)
}
inline std::string* ProjectileMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& ProjectileMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void ProjectileMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.resource)
}

// string resourceMaterial = 10;
inline void ProjectileMetaData::clear_resourcematerial() {
  resourcematerial_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::resourcematerial() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.resourceMaterial)
  return _internal_resourcematerial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_resourcematerial(ArgT0&& arg0, ArgT... args) {
 
 resourcematerial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.resourceMaterial)
}
inline std::string* ProjectileMetaData::mutable_resourcematerial() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.resourceMaterial)
  return _internal_mutable_resourcematerial();
}
inline const std::string& ProjectileMetaData::_internal_resourcematerial() const {
  return resourcematerial_.Get();
}
inline void ProjectileMetaData::_internal_set_resourcematerial(const std::string& value) {
  
  resourcematerial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_resourcematerial() {
  
  return resourcematerial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_resourcematerial() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.resourceMaterial)
  return resourcematerial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_resourcematerial(std::string* resourcematerial) {
  if (resourcematerial != nullptr) {
    
  } else {
    
  }
  resourcematerial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcematerial,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.resourceMaterial)
}

// string effect = 11;
inline void ProjectileMetaData::clear_effect() {
  effect_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::effect() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effect)
  return _internal_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_effect(ArgT0&& arg0, ArgT... args) {
 
 effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.effect)
}
inline std::string* ProjectileMetaData::mutable_effect() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.effect)
  return _internal_mutable_effect();
}
inline const std::string& ProjectileMetaData::_internal_effect() const {
  return effect_.Get();
}
inline void ProjectileMetaData::_internal_set_effect(const std::string& value) {
  
  effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_effect() {
  
  return effect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_effect() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.effect)
  return effect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_effect(std::string* effect) {
  if (effect != nullptr) {
    
  } else {
    
  }
  effect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.effect)
}

// .Protocol.PBVector effectLocation = 12;
inline bool ProjectileMetaData::_internal_has_effectlocation() const {
  return this != internal_default_instance() && effectlocation_ != nullptr;
}
inline bool ProjectileMetaData::has_effectlocation() const {
  return _internal_has_effectlocation();
}
inline void ProjectileMetaData::clear_effectlocation() {
  if (GetArenaForAllocation() == nullptr && effectlocation_ != nullptr) {
    delete effectlocation_;
  }
  effectlocation_ = nullptr;
}
inline const ::Protocol::PBVector& ProjectileMetaData::_internal_effectlocation() const {
  const ::Protocol::PBVector* p = effectlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PBVector&>(
      ::Protocol::_PBVector_default_instance_);
}
inline const ::Protocol::PBVector& ProjectileMetaData::effectlocation() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectLocation)
  return _internal_effectlocation();
}
inline void ProjectileMetaData::unsafe_arena_set_allocated_effectlocation(
    ::Protocol::PBVector* effectlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectlocation_);
  }
  effectlocation_ = effectlocation;
  if (effectlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileMetaData.effectLocation)
}
inline ::Protocol::PBVector* ProjectileMetaData::release_effectlocation() {
  
  ::Protocol::PBVector* temp = effectlocation_;
  effectlocation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PBVector* ProjectileMetaData::unsafe_arena_release_effectlocation() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.effectLocation)
  
  ::Protocol::PBVector* temp = effectlocation_;
  effectlocation_ = nullptr;
  return temp;
}
inline ::Protocol::PBVector* ProjectileMetaData::_internal_mutable_effectlocation() {
  
  if (effectlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PBVector>(GetArenaForAllocation());
    effectlocation_ = p;
  }
  return effectlocation_;
}
inline ::Protocol::PBVector* ProjectileMetaData::mutable_effectlocation() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.effectLocation)
  return _internal_mutable_effectlocation();
}
inline void ProjectileMetaData::set_allocated_effectlocation(::Protocol::PBVector* effectlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete effectlocation_;
  }
  if (effectlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PBVector>::GetOwningArena(effectlocation);
    if (message_arena != submessage_arena) {
      effectlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectlocation, submessage_arena);
    }
    
  } else {
    
  }
  effectlocation_ = effectlocation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.effectLocation)
}

// float effectScale = 13;
inline void ProjectileMetaData::clear_effectscale() {
  effectscale_ = 0;
}
inline float ProjectileMetaData::_internal_effectscale() const {
  return effectscale_;
}
inline float ProjectileMetaData::effectscale() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectScale)
  return _internal_effectscale();
}
inline void ProjectileMetaData::_internal_set_effectscale(float value) {
  
  effectscale_ = value;
}
inline void ProjectileMetaData::set_effectscale(float value) {
  _internal_set_effectscale(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.effectScale)
}

// string effectMesh = 14;
inline void ProjectileMetaData::clear_effectmesh() {
  effectmesh_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::effectmesh() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectMesh)
  return _internal_effectmesh();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_effectmesh(ArgT0&& arg0, ArgT... args) {
 
 effectmesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.effectMesh)
}
inline std::string* ProjectileMetaData::mutable_effectmesh() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.effectMesh)
  return _internal_mutable_effectmesh();
}
inline const std::string& ProjectileMetaData::_internal_effectmesh() const {
  return effectmesh_.Get();
}
inline void ProjectileMetaData::_internal_set_effectmesh(const std::string& value) {
  
  effectmesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_effectmesh() {
  
  return effectmesh_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_effectmesh() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.effectMesh)
  return effectmesh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_effectmesh(std::string* effectmesh) {
  if (effectmesh != nullptr) {
    
  } else {
    
  }
  effectmesh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectmesh,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.effectMesh)
}

// string effectMaterial = 15;
inline void ProjectileMetaData::clear_effectmaterial() {
  effectmaterial_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::effectmaterial() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectMaterial)
  return _internal_effectmaterial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_effectmaterial(ArgT0&& arg0, ArgT... args) {
 
 effectmaterial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.effectMaterial)
}
inline std::string* ProjectileMetaData::mutable_effectmaterial() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.effectMaterial)
  return _internal_mutable_effectmaterial();
}
inline const std::string& ProjectileMetaData::_internal_effectmaterial() const {
  return effectmaterial_.Get();
}
inline void ProjectileMetaData::_internal_set_effectmaterial(const std::string& value) {
  
  effectmaterial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_effectmaterial() {
  
  return effectmaterial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_effectmaterial() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.effectMaterial)
  return effectmaterial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_effectmaterial(std::string* effectmaterial) {
  if (effectmaterial != nullptr) {
    
  } else {
    
  }
  effectmaterial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectmaterial,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.effectMaterial)
}

// .Protocol.PBVector effectMeshLocation = 16;
inline bool ProjectileMetaData::_internal_has_effectmeshlocation() const {
  return this != internal_default_instance() && effectmeshlocation_ != nullptr;
}
inline bool ProjectileMetaData::has_effectmeshlocation() const {
  return _internal_has_effectmeshlocation();
}
inline void ProjectileMetaData::clear_effectmeshlocation() {
  if (GetArenaForAllocation() == nullptr && effectmeshlocation_ != nullptr) {
    delete effectmeshlocation_;
  }
  effectmeshlocation_ = nullptr;
}
inline const ::Protocol::PBVector& ProjectileMetaData::_internal_effectmeshlocation() const {
  const ::Protocol::PBVector* p = effectmeshlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PBVector&>(
      ::Protocol::_PBVector_default_instance_);
}
inline const ::Protocol::PBVector& ProjectileMetaData::effectmeshlocation() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectMeshLocation)
  return _internal_effectmeshlocation();
}
inline void ProjectileMetaData::unsafe_arena_set_allocated_effectmeshlocation(
    ::Protocol::PBVector* effectmeshlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectmeshlocation_);
  }
  effectmeshlocation_ = effectmeshlocation;
  if (effectmeshlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileMetaData.effectMeshLocation)
}
inline ::Protocol::PBVector* ProjectileMetaData::release_effectmeshlocation() {
  
  ::Protocol::PBVector* temp = effectmeshlocation_;
  effectmeshlocation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PBVector* ProjectileMetaData::unsafe_arena_release_effectmeshlocation() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.effectMeshLocation)
  
  ::Protocol::PBVector* temp = effectmeshlocation_;
  effectmeshlocation_ = nullptr;
  return temp;
}
inline ::Protocol::PBVector* ProjectileMetaData::_internal_mutable_effectmeshlocation() {
  
  if (effectmeshlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PBVector>(GetArenaForAllocation());
    effectmeshlocation_ = p;
  }
  return effectmeshlocation_;
}
inline ::Protocol::PBVector* ProjectileMetaData::mutable_effectmeshlocation() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.effectMeshLocation)
  return _internal_mutable_effectmeshlocation();
}
inline void ProjectileMetaData::set_allocated_effectmeshlocation(::Protocol::PBVector* effectmeshlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete effectmeshlocation_;
  }
  if (effectmeshlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PBVector>::GetOwningArena(effectmeshlocation);
    if (message_arena != submessage_arena) {
      effectmeshlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectmeshlocation, submessage_arena);
    }
    
  } else {
    
  }
  effectmeshlocation_ = effectmeshlocation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.effectMeshLocation)
}

// float effectMeshScale = 17;
inline void ProjectileMetaData::clear_effectmeshscale() {
  effectmeshscale_ = 0;
}
inline float ProjectileMetaData::_internal_effectmeshscale() const {
  return effectmeshscale_;
}
inline float ProjectileMetaData::effectmeshscale() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.effectMeshScale)
  return _internal_effectmeshscale();
}
inline void ProjectileMetaData::_internal_set_effectmeshscale(float value) {
  
  effectmeshscale_ = value;
}
inline void ProjectileMetaData::set_effectmeshscale(float value) {
  _internal_set_effectmeshscale(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.effectMeshScale)
}

// string explosionEffect = 18;
inline void ProjectileMetaData::clear_explosioneffect() {
  explosioneffect_.ClearToEmpty();
}
inline const std::string& ProjectileMetaData::explosioneffect() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileMetaData.explosionEffect)
  return _internal_explosioneffect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectileMetaData::set_explosioneffect(ArgT0&& arg0, ArgT... args) {
 
 explosioneffect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ProjectileMetaData.explosionEffect)
}
inline std::string* ProjectileMetaData::mutable_explosioneffect() {
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileMetaData.explosionEffect)
  return _internal_mutable_explosioneffect();
}
inline const std::string& ProjectileMetaData::_internal_explosioneffect() const {
  return explosioneffect_.Get();
}
inline void ProjectileMetaData::_internal_set_explosioneffect(const std::string& value) {
  
  explosioneffect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::_internal_mutable_explosioneffect() {
  
  return explosioneffect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectileMetaData::release_explosioneffect() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileMetaData.explosionEffect)
  return explosioneffect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectileMetaData::set_allocated_explosioneffect(std::string* explosioneffect) {
  if (explosioneffect != nullptr) {
    
  } else {
    
  }
  explosioneffect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explosioneffect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileMetaData.explosionEffect)
}

// -------------------------------------------------------------------

// SummonsMetaData

// uint64 id = 1;
inline void SummonsMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.id)
  return _internal_id();
}
inline void SummonsMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SummonsMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.id)
}

// uint64 skillId = 2;
inline void SummonsMetaData::clear_skillid() {
  skillid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.skillId)
  return _internal_skillid();
}
inline void SummonsMetaData::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  skillid_ = value;
}
inline void SummonsMetaData::set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.skillId)
}

// uint64 duration = 3;
inline void SummonsMetaData::clear_duration() {
  duration_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.duration)
  return _internal_duration();
}
inline void SummonsMetaData::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ = value;
}
inline void SummonsMetaData::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.duration)
}

// string resource = 4;
inline void SummonsMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& SummonsMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummonsMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.resource)
}
inline std::string* SummonsMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.SummonsMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& SummonsMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void SummonsMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SummonsMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SummonsMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.SummonsMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SummonsMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SummonsMetaData.resource)
}

// string anim = 5;
inline void SummonsMetaData::clear_anim() {
  anim_.ClearToEmpty();
}
inline const std::string& SummonsMetaData::anim() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.anim)
  return _internal_anim();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummonsMetaData::set_anim(ArgT0&& arg0, ArgT... args) {
 
 anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.anim)
}
inline std::string* SummonsMetaData::mutable_anim() {
  // @@protoc_insertion_point(field_mutable:Protocol.SummonsMetaData.anim)
  return _internal_mutable_anim();
}
inline const std::string& SummonsMetaData::_internal_anim() const {
  return anim_.Get();
}
inline void SummonsMetaData::_internal_set_anim(const std::string& value) {
  
  anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SummonsMetaData::_internal_mutable_anim() {
  
  return anim_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SummonsMetaData::release_anim() {
  // @@protoc_insertion_point(field_release:Protocol.SummonsMetaData.anim)
  return anim_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SummonsMetaData::set_allocated_anim(std::string* anim) {
  if (anim != nullptr) {
    
  } else {
    
  }
  anim_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anim,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SummonsMetaData.anim)
}

// .Protocol.StatMetaData stat = 6;
inline bool SummonsMetaData::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool SummonsMetaData::has_stat() const {
  return _internal_has_stat();
}
inline void SummonsMetaData::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::Protocol::StatMetaData& SummonsMetaData::_internal_stat() const {
  const ::Protocol::StatMetaData* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatMetaData&>(
      ::Protocol::_StatMetaData_default_instance_);
}
inline const ::Protocol::StatMetaData& SummonsMetaData::stat() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.stat)
  return _internal_stat();
}
inline void SummonsMetaData::unsafe_arena_set_allocated_stat(
    ::Protocol::StatMetaData* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.SummonsMetaData.stat)
}
inline ::Protocol::StatMetaData* SummonsMetaData::release_stat() {
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::StatMetaData* SummonsMetaData::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:Protocol.SummonsMetaData.stat)
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::Protocol::StatMetaData* SummonsMetaData::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatMetaData>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::Protocol::StatMetaData* SummonsMetaData::mutable_stat() {
  // @@protoc_insertion_point(field_mutable:Protocol.SummonsMetaData.stat)
  return _internal_mutable_stat();
}
inline void SummonsMetaData::set_allocated_stat(::Protocol::StatMetaData* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::StatMetaData>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.SummonsMetaData.stat)
}

// uint64 detectrange = 7;
inline void SummonsMetaData::clear_detectrange() {
  detectrange_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::_internal_detectrange() const {
  return detectrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::detectrange() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.detectrange)
  return _internal_detectrange();
}
inline void SummonsMetaData::_internal_set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  detectrange_ = value;
}
inline void SummonsMetaData::set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_detectrange(value);
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.detectrange)
}

// uint64 attrange = 8;
inline void SummonsMetaData::clear_attrange() {
  attrange_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::_internal_attrange() const {
  return attrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummonsMetaData::attrange() const {
  // @@protoc_insertion_point(field_get:Protocol.SummonsMetaData.attrange)
  return _internal_attrange();
}
inline void SummonsMetaData::_internal_set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attrange_ = value;
}
inline void SummonsMetaData::set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attrange(value);
  // @@protoc_insertion_point(field_set:Protocol.SummonsMetaData.attrange)
}

// -------------------------------------------------------------------

// EnemyMetaData

// uint64 id = 1;
inline void EnemyMetaData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.id)
  return _internal_id();
}
inline void EnemyMetaData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void EnemyMetaData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.id)
}

// uint64 skillId = 2;
inline void EnemyMetaData::clear_skillid() {
  skillid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.skillId)
  return _internal_skillid();
}
inline void EnemyMetaData::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  skillid_ = value;
}
inline void EnemyMetaData::set_skillid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.skillId)
}

// string resource = 3;
inline void EnemyMetaData::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& EnemyMetaData::resource() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnemyMetaData::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.resource)
}
inline std::string* EnemyMetaData::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnemyMetaData.resource)
  return _internal_mutable_resource();
}
inline const std::string& EnemyMetaData::_internal_resource() const {
  return resource_.Get();
}
inline void EnemyMetaData::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnemyMetaData::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnemyMetaData::release_resource() {
  // @@protoc_insertion_point(field_release:Protocol.EnemyMetaData.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnemyMetaData::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnemyMetaData.resource)
}

// string anim = 4;
inline void EnemyMetaData::clear_anim() {
  anim_.ClearToEmpty();
}
inline const std::string& EnemyMetaData::anim() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.anim)
  return _internal_anim();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnemyMetaData::set_anim(ArgT0&& arg0, ArgT... args) {
 
 anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.anim)
}
inline std::string* EnemyMetaData::mutable_anim() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnemyMetaData.anim)
  return _internal_mutable_anim();
}
inline const std::string& EnemyMetaData::_internal_anim() const {
  return anim_.Get();
}
inline void EnemyMetaData::_internal_set_anim(const std::string& value) {
  
  anim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnemyMetaData::_internal_mutable_anim() {
  
  return anim_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnemyMetaData::release_anim() {
  // @@protoc_insertion_point(field_release:Protocol.EnemyMetaData.anim)
  return anim_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnemyMetaData::set_allocated_anim(std::string* anim) {
  if (anim != nullptr) {
    
  } else {
    
  }
  anim_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anim,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnemyMetaData.anim)
}

// .Protocol.StatMetaData stat = 5;
inline bool EnemyMetaData::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool EnemyMetaData::has_stat() const {
  return _internal_has_stat();
}
inline void EnemyMetaData::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::Protocol::StatMetaData& EnemyMetaData::_internal_stat() const {
  const ::Protocol::StatMetaData* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatMetaData&>(
      ::Protocol::_StatMetaData_default_instance_);
}
inline const ::Protocol::StatMetaData& EnemyMetaData::stat() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.stat)
  return _internal_stat();
}
inline void EnemyMetaData::unsafe_arena_set_allocated_stat(
    ::Protocol::StatMetaData* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.EnemyMetaData.stat)
}
inline ::Protocol::StatMetaData* EnemyMetaData::release_stat() {
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::StatMetaData* EnemyMetaData::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:Protocol.EnemyMetaData.stat)
  
  ::Protocol::StatMetaData* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::Protocol::StatMetaData* EnemyMetaData::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatMetaData>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::Protocol::StatMetaData* EnemyMetaData::mutable_stat() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnemyMetaData.stat)
  return _internal_mutable_stat();
}
inline void EnemyMetaData::set_allocated_stat(::Protocol::StatMetaData* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::StatMetaData>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnemyMetaData.stat)
}

// uint64 detectrange = 7;
inline void EnemyMetaData::clear_detectrange() {
  detectrange_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::_internal_detectrange() const {
  return detectrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::detectrange() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.detectrange)
  return _internal_detectrange();
}
inline void EnemyMetaData::_internal_set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  detectrange_ = value;
}
inline void EnemyMetaData::set_detectrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_detectrange(value);
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.detectrange)
}

// uint64 attrange = 8;
inline void EnemyMetaData::clear_attrange() {
  attrange_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::_internal_attrange() const {
  return attrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyMetaData::attrange() const {
  // @@protoc_insertion_point(field_get:Protocol.EnemyMetaData.attrange)
  return _internal_attrange();
}
inline void EnemyMetaData::_internal_set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attrange_ = value;
}
inline void EnemyMetaData::set_attrange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attrange(value);
  // @@protoc_insertion_point(field_set:Protocol.EnemyMetaData.attrange)
}

// -------------------------------------------------------------------

// StatMetaData

// uint64 hp = 1;
inline void StatMetaData::clear_hp() {
  hp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.hp)
  return _internal_hp();
}
inline void StatMetaData::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hp_ = value;
}
inline void StatMetaData::set_hp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.hp)
}

// uint64 mp = 2;
inline void StatMetaData::clear_mp() {
  mp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.mp)
  return _internal_mp();
}
inline void StatMetaData::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mp_ = value;
}
inline void StatMetaData::set_mp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.mp)
}

// uint64 exp = 3;
inline void StatMetaData::clear_exp() {
  exp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.exp)
  return _internal_exp();
}
inline void StatMetaData::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exp_ = value;
}
inline void StatMetaData::set_exp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.exp)
}

// uint64 maxhp = 4;
inline void StatMetaData::clear_maxhp() {
  maxhp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.maxhp)
  return _internal_maxhp();
}
inline void StatMetaData::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxhp_ = value;
}
inline void StatMetaData::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.maxhp)
}

// uint64 maxmp = 5;
inline void StatMetaData::clear_maxmp() {
  maxmp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_maxmp() const {
  return maxmp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::maxmp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.maxmp)
  return _internal_maxmp();
}
inline void StatMetaData::_internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxmp_ = value;
}
inline void StatMetaData::set_maxmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxmp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.maxmp)
}

// uint64 maxexp = 6;
inline void StatMetaData::clear_maxexp() {
  maxexp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::_internal_maxexp() const {
  return maxexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatMetaData::maxexp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatMetaData.maxexp)
  return _internal_maxexp();
}
inline void StatMetaData::_internal_set_maxexp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxexp_ = value;
}
inline void StatMetaData::set_maxexp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxexp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatMetaData.maxexp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
